# ServiceAccount pour l'application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: votre-app-sa
  namespace: default

---
# ClusterRole avec les permissions nécessaires
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: votre-app-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding pour lier le ServiceAccount au ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: votre-app-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: votre-app-role
subjects:
- kind: ServiceAccount
  name: votre-app-sa
  namespace: default

---
# Pod principal
apiVersion: v1
kind: Pod
metadata:
  name: votre-app-pod
  namespace: default
  labels:
    app: votre-app
spec:
  serviceAccountName: votre-app-sa
  containers:
  - name: votre-app
    image: tmenouer/kubernetes:cpp-monitor2  # Remplacez par le nom de votre image
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
    env:
    - name: KUBECONFIG
      value: "/var/run/secrets/kubernetes.io/serviceaccount"
    # Optionnel : montage de volumes si nécessaire
    # volumeMounts:
    # - name: config-volume
    #   mountPath: /app/config
  restartPolicy: OnFailure
  # Optionnel : volumes
  # volumes:
  # - name: config-volume
  #   configMap:
  #     name: votre-config
