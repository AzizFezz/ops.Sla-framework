##to copy the sla-service.war to the tomcat directory
##if the path doesn't exist, it will be created
tomcat.directory = /opt/tomcat/webapps/sla-service.war

##to configure the access to the database
db.username = atossla
db.password = _atossla_
db.name = atossla 
db.host = localhost
db.port = 3306
db.showSQL = true

##for eu.atos.sla a different file is generated. it will be generated at  log.slaatos.fullpathFilename
##another file with all the logs, hibernate, spring, etc, is generated at log.thirdpartysw.fullpathFilename
##the location of this file must be specified here
log.slaatos.fullpathFilename = /var/log/slaatos.log
log.slaatos.debugLevel = ALL
log.thirdpartysw.fullpathFilename = /var/log/thirdpartysw.log
log.thirdpartysw.debugLevel = INFO

#sla-enforcement - TOUTES LES PROPRIÉTÉS NÉCESSAIRES
enforcement.constraintEvaluator.class = eu.atos.xifi.sla.monitoring.OrionConstraintEvaluator
enforcement.metricsRetriever.class = eu.atos.xifi.sla.monitoring.OrionMetricsRetriever
enforcement.poll.interval.mseconds = 10000
enforcement.spawnlookup.cron = 30 * * * * *
enforcement.notification.class = eu.atos.sla.notification.DummyEnforcementNotifier

# AUSSI AVEC LES PRÉFIXES COMPLETS (pour compatibilité)
eu.atos.sla.enforcement.constraintEvaluator.class = eu.atos.xifi.sla.monitoring.OrionConstraintEvaluator
eu.atos.sla.enforcement.metricsRetriever.class = eu.atos.xifi.sla.monitoring.OrionMetricsRetriever
eu.atos.sla.enforcement.poll.interval.mseconds = 10000
eu.atos.sla.enforcement.spawnlookup.cron = 30 * * * * *
eu.atos.sla.enforcement.notification.class = eu.atos.sla.notification.DummyEnforcementNotifier

##security
##configure user and password to access to the rest services
##basic security is used
service.basicsecurity.user = atossla
service.basicsecurity.password = _atossla_

#xml and json parsers
#please, set the values to  eu.atos.sla.parser.NullParser if no parser has to be used for json.
#implemented json parsers:  eu.atos.sla.parser.json.AgreementParser,  eu.atos.sla.parser.json.TemplateParser
#implemented xml parsers:   eu.atos.sla.parser.xml.AgreementParser,   eu.atos.sla.parser.xml.TemplateParser
#if eu.atos.sla.parser.NullParser is set for the xml parsers, the above mentioned default parsers will be used. The SLA core allways accepts
#templates and agreements in xml format. In case of json it is possible to set the parser to null. In such a case nothing will be executed
parser.json.agreement.class = eu.atos.sla.parser.NullParser 
parser.json.template.class = eu.atos.sla.parser.NullParser
parser.xml.agreement.class = eu.atos.sla.parser.xml.AgreementParser
parser.xml.template.class = eu.atos.sla.parser.xml.TemplateParser

#format for date in the template and agreement. Please check java.text.SimpleDateFormat to know the format of the string
parser.date.format = yyyy-MM-dd'T'HH:mm:ssz
#if no timezone is readed with the format, this will be the used timezone
parser.date.unmarshall.timezone = GMT
#timezone to be used to return the date values
parser.date.marshall.timezone = CET

# 
# Converter values
#

# class that parses business values in a template/agreement
converter.businessparser.class = eu.atos.sla.util.BusinessValueListParser

# Variables DB pour Spring
DB_DRIVER = com.mysql.jdbc.Driver
DB_URL = jdbc:mysql://localhost:3306/atossla
DB_USERNAME = atossla
DB_PASSWORD = _atossla_
DB_SHOWSQL = true